Introduction to Git
for University of Mississippi IT Staff



---- Presentation Points ----
What is Git?
	“not version control, change control”
	changes are tracked as individual blocks (lines of code) rather than by file
	essentially Git tracks diffs

Git Model
	distributed SCM
	every working copy has its own repository
	to share, changes are pushed-to or pulled-from other repositories

What can I use it for?
	any collection of files that you would benefit from keeping a running log for
	source control, obviously
	website content
	system config files (most systems will ignore a .git directory)
		I use this for the settings in use on web3 and web5 to ensure changes to these settings can be discovered.
	presentation projects (such as this one)

Get Git
	(I plan to do this in the presentation stage but this may prove difficult for all users to be on the same page)
	Mac		http://code.google.com/p/git-osx-installer
			http://mac.github.com
	Windows	http://windows.github.com
		be sure to select Git For Windows rather than msysGit

Git Basics
	setup global git config
		git config --global user.name "First Last"
		git config --global user.email user@host.tld
	creating a repo
	staging
		pick the changes (files or lines even) you wish to commit
		let's you fine-tune your commits to be atomic blocks of changes (even to the line level)
	committing
		message style (present indicative summary, free-form description)
		summary should indicate _what the change will do_ when applied to the project
			Read as if: "This change [insert your summary here] when added to your repo."

Git Remote Basics
	cloning
		clone - https://github.com/ErrolSayre/Git-Workshop-2012.git
	fetching
	pushing

UM Remote Setup
	create your keys
	submit public key
		(I'll create a repo for users as needed during the repo into Gitolite.)
		see link on project readme

Git Advanced Topics
	branching
		allows you to make experimental or long-term changes without affecting the general code-base
		collect a long series of changes that can then be applied all at once when completed
		collect history of volatile changes while experimenting
	merging
		used to bring a branch into another (or the master)
		used to address conflicts when updating a branch from a remote repo
	tagging
		allows you to assign a more readable name to a particular set of changes

Git Quirks
	staging area
		Git is fairly unique in allowing the user to craft an ideal commit out of the files they wish to use for it rather than all changes on disk.
		This is done by adding files to a staging area before committing those specific files.
		This allows you to collect files with related changes out of all the files that have been changed to make semantic commits.
		Most of the GUI Git clients abstract this away from you by showing checkmarks or another selection means to pick the files to stage.
	SAP Eclipse Projects
		be sure to create these in the CLI as the GitHub GUI for Windows will automatically ignore most of the files
		also be aware that the .project and .classpath files will not be included by default so you'll have to manually add them if you'd like to keep these as a part of your repository


---- Presentation Resources ----

Joel Spolsky Quote
	“The interesting part is that these systems think in terms of changes, not in terms of versions.
	“That’s a very zen-like thing to say, I know. Traditional version control thinks: OK, I have version 1. And now I have version 2. And now I have version 3.
	“And distributed version control thinks, I had nothing. And then I got these changes. And then I got these other changes.
	“It’s a different Program Model, so the user model has to change.
	...
	“In Subversion, you might think, ‘bring my version up to date with the main version’ or ‘go back to the previous version.’
	“In [Git], you think, ‘get me Jacob’s change set’ or ‘let’s just forget that change set.’
	“If you come at [Git] with a Subversion mindset, things will almost work, but when they don’t, you’ll be confused, unhappy, and unsuccessful, and you’ll hate [Git].
	“Whereas if you free your mind and reimagine version control, and grok the zen of the difference between thinking about managing the versions vs. thinking about managing the changes, you’ll become enlightened and happy and realize that this is the way version control was meant to work.”

Example Campus Use
	UM Events
	UM RAC
		Xcode includes built-in Git support
		This project includes a sub-project of the actual Xcode repo in addition to the outer wrapper repo.
	other under-the-radar projects (I'll mention these in person but not in the contents of this repo.)
	
Links
	http://danielmiessler.com/study/git/
	http://www.git-tower.com/learn/version-control-best-practices.html
	http://www.alistapart.com/articles/get-started-with-git/
	http://git-scm.com/book/
	http://shop.oreilly.com/product/0636920024774.do?code=VDWK

Common Commands
	